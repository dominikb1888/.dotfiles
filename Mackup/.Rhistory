xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
remedy::remedy_opts$get('hotkeys')
xaringan::inf_mr()
xaringan::inf_mr("0_Index.Rmd")
remedy::remedy_opts$get('hotkeys')
xaringan::inf_mr()
xaringan::inf_mr()
?pandoc.p
?pandoc.p
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
xaringan::inf_mr()
install.packages('addinslist')
install.packages("tsviz")
addinslist:::addinslistAddin()
addinslist:::addinslistAddin()
addinslist:::addinslistAddin()
install.packages(bupaR)
install.packages0"(bupaR")
install.packages0("bupaR")
install.packages("bupaR")
install.packages("edeaR")
install.packages("eventdataR")
install.packages("processmapR")
install.packages("processmonitR")
install.packages("xesreadR")
install.packages("petrinetR")
library(bupaR)
library(eventdataR)
patients %>% summary
pm4py::install_pm4py()
library(pm4py)
install.packages("pm4py")
install.packages("processanimateR")
install.packages("heuristicsmineR")
class(patients)
patients
mapping(patients)
dim(patients)
dim(patients_df)
patients_df <- data.frame(patients)%>%  # convert object
select(- .order) %>% #remove this col as we don't need it and it messes with the spread function
spread(registration_type, time)
data.frame(patients)
patients_df <- data.frame(patients) %>%  # convert object
select(- .order) %>% #remove this col as we don't need it and it messes with the spread function
spread(registration_type, time)
library(plyr)
library(tidyverse)
library(bupaR)
library(eventdataR)
theme_set(theme_light())
class(patients)
mapping(patients)
dim(patients)
patients_df <- data.frame(patients) %>%  # convert object
select(- .order) %>% #remove this col as we don't need it and it messes with the spread function
spread(registration_type, time)
dim(patients_df)
library(dplyr)
library(tidyverse)
library(bupaR)
library(eventdataR)
theme_set(theme_light())
class(patients)
mapping(patients)
dim(patients)
patients_df <- data.frame(patients) %>%  # convert object
select(- .order) %>% #remove this col as we don't need it and it messes with the spread function
spread(registration_type, time)
dim(patients_df)
library(dplyr)
library(tidyverse)
library(bupaR)
library(eventdataR)
theme_set(theme_light())
#class(patients)
#mapping(patients)
dim(patients)
patients_df <- data.frame(patients) %>%  # convert object
select(- .order) %>% #remove this col as we don't need it and it messes with the spread function
spread(registration_type, time)
dim(patients_df)
n_activities(patients)
n_distinct(patients$handling)
n_distinct(patients$handling)
n_activities(patients)
activity_labels(patients)
activities(patients)
processing_time(patients, #event log
"activity", # level of analysis, in this situation at level of activity
units="mins")
processing_time(patients, level="log", units="days")
# Testing a hypotheses by looking at the time of cases with particular activity
patients %>% filter_activity_presence("MRI SCAN") %>% processing_time(level="log", units="hours")
patients %>% filter_activity_presence("MRI SCAN",
method="none") %>% # set arugment to "none" to for cases without the specific activity
processing_time(level="log", units="hours")
sepsis
activity_frequency(sepsis, level = "activity") %>% arrange(relative)#
sepsis_subset<-filter_activity_presence(sepsis, "Release E") # cases with least common activity to achieve smaller eventlog
sepsis_subset<-filter_activity_presence(sepsis, "Release E") # cases with least common activity to achieve smaller eventlog
sepsis_subset <- filter_activity_presence(sepsis, "Release E") # cases with least common activity to achieve smaller eventlog
sepsis
activity_frequency(sepsis, level = "activity") %>% arrange(relative)#
sepsis_subset <- filter_activity_presence(sepsis, "Release E") # cases with least common activity to achieve smaller eventlog
sepsis_subset %>% process_map(type = frequency("absolute"))
sepsis_subset %>% process_map(type = frequency("absolute"))
sepsis_subset %>% process_map(type = frequency("absolute"))
sepsis_subset %>% process_map(type = frequency("absolute_case"))
number_of_repetitions(sepsis_subset, level="activity", type="all")
number_of_repetitions(sepsis_subset, level="activity", type="repeat")
number_of_selfloops(sepsis_subset, level="case", type = "redo")
number_of_selfloops(sepsis_subset, level="case", type = "repeat")
number_of_selfloops(sepsis_subset, level="case", type = "redo")
number_of_repetitions(sepsis_subset, level="activity", type="redo")
number_of_repetitions(sepsis_subset, level="activity", type="repeat")
number_of_selfloops(sepsis_subset, level="case", type = "redo")
number_of_selfloops(sepsis_subset, level="case", type = "repeat")
animate_process(sepsis_subset)
library(processanimateR)
library(eventdataR)
animate_process(sepsis_subset)
animate_process(patients, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(color = token_scale("employee",
scale = "ordinal",
range = RColorBrewer::brewer.pal(7, "Paired"))))
animate_process(patients, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(
color = token_scale("employee",
scale = "ordinal",
range = RColorBrewer::brewer.pal(7, "Paired"),
shape = "image",
size = token_scale(10),
image = token_scale("https://upload.wikimedia.org/wikipedia/en/5/5f/Pacman.gif"))
)))
animate_process(patients, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(
color = token_scale("employee",
scale = "ordinal",
range = RColorBrewer::brewer.pal(7, "Paired"),
shape = "image",
size = token_scale(10),
image = token_scale("https://upload.wikimedia.org/wikipedia/en/5/5f/Pacman.gif")
)))
animate_process(patients, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(
shape = "image",
size = token_scale(10),
image = token_scale("https://upload.wikimedia.org/wikipedia/en/5/5f/Pacman.gif")
)))
animate_process(patients, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(
shape = "image",
size = token_scale(10),
image = token_scale("https://upload.wikimedia.org/wikipedia/en/5/5f/Pacman.gif")
))
animate_process(patients, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(color = token_scale("employee",
scale = "ordinal",
range = RColorBrewer::brewer.pal(7, "Paired"))))
animate_process(sepsis_subset, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(color = token_scale("employee",
scale = "ordinal",
range = RColorBrewer::brewer.pal(7, "Paired"))))
library(processanimateR)
library(eventdataR)
animate_process(sepsis_subset, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(color = token_scale("employee",
scale = "ordinal",
range = RColorBrewer::brewer.pal(7, "Paired"))))
sepsis_subset
animate_process(sepsis_subset, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(color = token_scale("resource",
scale = "ordinal",
range = RColorBrewer::brewer.pal(7, "Paired"))))
animate_process(sepsis_subset, mode = "relative", jitter = 10, legend = "color",
mapping = token_aes(color = token_scale("resource",
scale = "ordinal",
range = RColorBrewer::brewer.pal(26, "Paired"))))
sepsis_df %>% head()
sepsis_df <- sepsis_df %>%
mutate(Date= as.Date(timestamp)) %>%
mutate("ID_day" = group_indices_(., .dots = c("resource","Date"))) %>% # add ID_day
group_by(ID_day) %>%
arrange(ID_day, timestamp) %>%
select(resource, ID_day, case_id) %>%
mutate(caseload = n_distinct(case_id)) %>% # caseload
ungroup()
#derive desired df
sepsis_df <-sepsis %>%
filter_resource(c("A", "B")) %>%  # filter 2 resources for our example
data.frame() %>% # convert event log object
select(case_id, activity, lifecycle, resource, timestamp) %>% # select relevant variables
drop_na() #drop na observation
#derive desired df
sepsis_df <- sepsis %>%
filter_resource(c("A", "B")) %>%  # filter 2 resources for our example
data.frame() %>% # convert event log object
select(case_id, activity, lifecycle, resource, timestamp) %>% # select relevant variables
drop_na() #drop na observation
#derive desired df
sepsis_df <- sepsis_subset %>%
filter_resource(c("A", "B")) %>%  # filter 2 resources for our example
data.frame() %>% # convert event log object
select(case_id, activity, lifecycle, resource, timestamp) %>% # select relevant variables
drop_na() #drop na observation
#derive desired df
sepsis_df <- sepsis_subset %>%
filter_resource(c("A", "B")) %>%  # filter 2 resources for our example
data.frame() %>% # convert event log object
select(case_id, activity, lifecycle, resource, timestamp) %>% # select relevant variables
drop_na() #drop na observation
#derive desired df
sepsis_df <- sepsis %>%
filter_resource(c("A", "B")) %>%  # filter 2 resources for our example
data.frame() %>% # convert event log object
select(case_id, activity, lifecycle, resource, timestamp) %>% # select relevant variables
drop_na() #drop na observation
#derive desired df
sepsis_df <- sepsis %>%
filter_resource(c("A", "B")) %>%  # filter 2 resources for our example
data.frame() %>% # convert event log object
select(case_id, activity, lifecycle, resource, timestamp) %>% # select relevant variables
drop_na() #drop na observation
sepsis_df %>% ggplot(aes (interupt_index, n, size=n)) + geom_point() + facet_grid(~resource)
library(tidyverse)
library(dplyr)
library(tidyverse)
#derive desired df
sepsis_df <- sepsis %>%
filter_resource(c("A", "B")) %>%  # filter 2 resources for our example
data.frame() %>% # convert event log object
select(case_id, activity, lifecycle, resource, timestamp) %>% # select relevant variables
drop_na() #drop na observation
# library
library(dplyr)
library(tidyverse)
library(bupaR)
#derive desired df
sepsis_df <- sepsis %>%
filter_resource(c("A", "B")) %>%  # filter 2 resources for our example
data.frame() %>% # convert event log object
select(case_id, activity, lifecycle, resource, timestamp) %>% # select relevant variables
drop_na() #drop na observation
sepsis_df <- sepsis_df %>%
mutate(Date = as.Date(timestamp)) %>%
mutate("ID_day" = group_indices_(., .dots = c("resource","Date"))) %>% # add ID_day
group_by(ID_day) %>%
arrange(ID_day, timestamp) %>%
select(resource, ID_day, case_id) %>%
mutate(caseload = n_distinct(case_id)) %>% # caseload
ungroup()
sepsis_df %>% head()
#remove duplicate rows
ix <- c(TRUE, rowSums(tail(sepsis_df, -1) == head(sepsis_df, -1)) != ncol(sepsis_df))
sepsis_df <- sepsis_df[ix,]
#transpose case_id column
sepsis_df <- ddply(sepsis_df, .(ID_day), transform, idx = paste("TB", 1:length(case_id), sep = ""))  %>%
spread(idx, case_id)
#transpose case_id column
sepsis_df <- dply(sepsis_df, .(ID_day), transform, idx = paste("TB", 1:length(case_id), sep = ""))  %>%
spread(idx, case_id)
#transpose case_id column
sepsis_df <- dddply(sepsis_df, .(ID_day), transform, idx = paste("TB", 1:length(case_id), sep = ""))  %>%
spread(idx, case_id)
library(plyr)
# library
library(dplyr)
library(plyr)
library(tidyverse)
library(bupaR)
#derive desired df
sepsis_df <- sepsis %>%
filter_resource(c("A", "B")) %>%  # filter 2 resources for our example
data.frame() %>% # convert event log object
select(case_id, activity, lifecycle, resource, timestamp) %>% # select relevant variables
drop_na() #drop na observation
sepsis_df <- sepsis_df %>%
mutate(Date = as.Date(timestamp)) %>%
mutate("ID_day" = group_indices_(., .dots = c("resource","Date"))) %>% # add ID_day
group_by(ID_day) %>%
arrange(ID_day, timestamp) %>%
select(resource, ID_day, case_id) %>%
mutate(caseload = n_distinct(case_id)) %>% # caseload
ungroup()
sepsis_df %>% head()
#remove duplicate rows
ix <- c(TRUE, rowSums(tail(sepsis_df, -1) == head(sepsis_df, -1)) != ncol(sepsis_df))
sepsis_df <- sepsis_df[ix,]
#transpose case_id column
sepsis_df <- plyr::ddply(sepsis_df, .(ID_day), transform, idx = paste("TB", 1:length(case_id), sep = ""))  %>%
spread(idx, case_id)
#calculate timeblocks
sepsis_df <- sepsis_df %>%
mutate(timeblock = rowSums(!is.na(select(.,starts_with("TB"))))) %>% select(-starts_with("TB")) # remove reduntanct TB variables
#calculate index
sepsis_df$interupt_index <- sepsis_df$timeblock/ sepsis_df$caseload
# sample size of index for each resource
sepsis_df<-sepsis_df %>%
add_count(resource, interupt_index)
head(sepsis_df)
sepsis_df %>% ggplot(aes (interupt_index, n, size=n)) + geom_point() + facet_grid(~resource)
#transpose case_id column
sepsis_df <- ddply(sepsis_df, .(ID_day), transform, idx = paste("TB", 1:length(case_id), sep = ""))  %>%
spread(idx, case_id)
# library
library(dplyr)
library(plyr)
library(tidyverse)
library(bupaR)
#derive desired df
sepsis_df <- sepsis %>%
filter_resource(c("A", "B")) %>%  # filter 2 resources for our example
data.frame() %>% # convert event log object
select(case_id, activity, lifecycle, resource, timestamp) %>% # select relevant variables
drop_na() #drop na observation
sepsis_df <- sepsis_df %>%
mutate(Date = as.Date(timestamp)) %>%
mutate("ID_day" = group_indices_(., .dots = c("resource","Date"))) %>% # add ID_day
group_by(ID_day) %>%
arrange(ID_day, timestamp) %>%
select(resource, ID_day, case_id) %>%
mutate(caseload = n_distinct(case_id)) %>% # caseload
ungroup()
sepsis_df %>% head()
#remove duplicate rows
ix <- c(TRUE, rowSums(tail(sepsis_df, -1) == head(sepsis_df, -1)) != ncol(sepsis_df))
sepsis_df <- sepsis_df[ix,]
#transpose case_id column
sepsis_df <- ddply(sepsis_df, .(ID_day), transform, idx = paste("TB", 1:length(case_id), sep = ""))  %>%
spread(idx, case_id)
#calculate timeblocks
sepsis_df <- sepsis_df %>%
mutate(timeblock = rowSums(!is.na(select(.,starts_with("TB"))))) %>% select(-starts_with("TB")) # remove reduntanct TB variables
#calculate index
sepsis_df$interupt_index <- sepsis_df$timeblock/ sepsis_df$caseload
# sample size of index for each resource
sepsis_df<-sepsis_df %>%
add_count(resource, interupt_index)
head(sepsis_df)
sepsis_df %>% ggplot(aes (interupt_index, n, size=n)) + geom_point() + facet_grid(~resource)
patients_df<-data.frame(patients)  #convert the `eventlog` object to a `dataframe` object
levels(patients_df$handling)
patients_df<-patients_df %>% mutate(handling= fct_relevel(handling, "Registration", "Triage and Assessment", "Blood test", "X-Ray", "MRI SCAN", "Discuss Results", "Check-out"))
levels(patients_df$handling)
patients_df<-data.frame(patients)  #convert the `eventlog` object to a `dataframe` object
levels(patients_df$handling)
patients_df<-patients_df %>% mutate(handling= fct_relevel(handling, "Registration", "Triage and Assessment", "Blood test", "X-Ray", "MRI SCAN", "Discuss Results", "Check-out"))
levels(patients_df$handling)
patients_df %>% dplyr::mutate(
time= format(time, format = "%H:%M:%S") %>%
as.POSIXct(format = "%H:%M:%S"), #standardized the date for ploting
hour= lubridate::floor_date(time, "hour")) %>% # round down time to nearest hour
count(handling, hour) %>% # total instances of each activity at each hour
add_count(handling, wt=n) %>% # total instances of each activity
mutate(percent= ((n/nn)*100)) %>% #relative freq for each activity
ggplot(aes(hour, handling, fill=percent)) + geom_tile(size=.5, color="white") + scale_fill_gradientn(colours = wesanderson::wes_palette("Zissou1", 20 ,type = "continuous"))+
theme_classic() +
labs(x="24hour Clock", y="", title= "Peak and Lull Period of Patient Activities", subtitle= "percentage calculated is the relative frequency for a specific activity", fill="%")  + scale_y_discrete(limits = rev(levels(patients_df$handling)))+ # reverse display of y-axis varaibles
scale_x_datetime(date_breaks = ("1 hour"), date_labels = "%H")  #display only 24H clock values
patients_df<-data.frame(patients)  #convert the `eventlog` object to a `dataframe` object
levels(patients_df$handling)
patients_df<-patients_df %>% mutate(handling= fct_relevel(handling, "Registration", "Triage and Assessment", "Blood test", "X-Ray", "MRI SCAN", "Discuss Results", "Check-out"))
levels(patients_df$handling)
patients_df %>%
dplyr::mutate(
time = format(time, format = "%H:%M:%S") %>%
as.POSIXct(format = "%H:%M:%S"), #standardized the date for ploting
hour = lubridate::floor_date(time, "hour")) %>% # round down time to nearest hour
count(handling, hour) %>% # total instances of each activity at each hour
add_count(handling, wt=n) %>% # total instances of each activity
mutate(percent= ((n/nn)*100)) %>% #relative freq for each activity
ggplot(aes(hour, handling, fill=percent)) + geom_tile(size=.5, color="white") + scale_fill_gradientn(colours = wesanderson::wes_palette("Zissou1", 20 ,type = "continuous"))+
theme_classic() +
labs(x="24hour Clock", y="", title= "Peak and Lull Period of Patient Activities", subtitle= "percentage calculated is the relative frequency for a specific activity", fill="%")  + scale_y_discrete(limits = rev(levels(patients_df$handling)))+ # reverse display of y-axis varaibles
scale_x_datetime(date_breaks = ("1 hour"), date_labels = "%H")  #display only 24H clock values
patients_df<-data.frame(patients)  #convert the `eventlog` object to a `dataframe` object
handling = levels(patients_df$handling)
patients_df<-patients_df %>% mutate(handling= fct_relevel(handling, "Registration", "Triage and Assessment", "Blood test", "X-Ray", "MRI SCAN", "Discuss Results", "Check-out"))
levels(patients_df$handling)
patients_df %>%
dplyr::mutate(
time = format(time, format = "%H:%M:%S") %>%
as.POSIXct(format = "%H:%M:%S"), #standardized the date for ploting
hour = lubridate::floor_date(time, "hour")) %>% # round down time to nearest hour
count(handling, hour) %>% # total instances of each activity at each hour
add_count(handling, wt=n) %>% # total instances of each activity
mutate(percent= ((n/nn)*100)) %>% #relative freq for each activity
ggplot(aes(hour, handling, fill=percent)) + geom_tile(size=.5, color="white") + scale_fill_gradientn(colours = wesanderson::wes_palette("Zissou1", 20 ,type = "continuous"))+
theme_classic() +
labs(x="24hour Clock", y="", title= "Peak and Lull Period of Patient Activities", subtitle= "percentage calculated is the relative frequency for a specific activity", fill="%")  + scale_y_discrete(limits = rev(levels(patients_df$handling)))+ # reverse display of y-axis varaibles
scale_x_datetime(date_breaks = ("1 hour"), date_labels = "%H")  #display only 24H clock values
handling = patients_df$handling
patients_df<-data.frame(patients)  #convert the `eventlog` object to a `dataframe` object
handling = patients_df$handling
patients_df<-patients_df %>% mutate(handling= fct_relevel(handling, "Registration", "Triage and Assessment", "Blood test", "X-Ray", "MRI SCAN", "Discuss Results", "Check-out"))
levels(patients_df$handling)
patients_df %>%
dplyr::mutate(
time = format(time, format = "%H:%M:%S") %>%
as.POSIXct(format = "%H:%M:%S"), #standardized the date for ploting
hour = lubridate::floor_date(time, "hour")) %>% # round down time to nearest hour
count(handling, hour) %>% # total instances of each activity at each hour
add_count(handling, wt=n) %>% # total instances of each activity
mutate(percent= ((n/nn)*100)) %>% #relative freq for each activity
ggplot(aes(hour, handling, fill=percent)) + geom_tile(size=.5, color="white") + scale_fill_gradientn(colours = wesanderson::wes_palette("Zissou1", 20 ,type = "continuous"))+
theme_classic() +
labs(x="24hour Clock", y="", title= "Peak and Lull Period of Patient Activities", subtitle= "percentage calculated is the relative frequency for a specific activity", fill="%")  + scale_y_discrete(limits = rev(levels(patients_df$handling)))+ # reverse display of y-axis varaibles
scale_x_datetime(date_breaks = ("1 hour"), date_labels = "%H")  #display only 24H clock values
patients_df$handling
levels(patients_df$handling)
patients_df<-data.frame(patients)  #convert the `eventlog` object to a `dataframe` object
levels(patients_df$handling)
patients_df <- patients_df %>%
mutate(handling = fct_relevel(handling, "Registration", "Triage and Assessment", "Blood test", "X-Ray", "MRI SCAN", "Discuss Results", "Check-out"))
levels(patients_df$handling)
patients_df %>%
dplyr::mutate(
time = format(time, format = "%H:%M:%S") %>%
as.POSIXct(format = "%H:%M:%S"), #standardized the date for ploting
hour = lubridate::floor_date(time, "hour")) %>% # round down time to nearest hour
count(handling, hour) %>% # total instances of each activity at each hour
add_count(handling, wt=n) %>% # total instances of each activity
mutate(percent= ((n/nn)*100)) %>% #relative freq for each activity
ggplot(aes(hour, handling, fill=percent)) + geom_tile(size=.5, color="white") + scale_fill_gradientn(colours = wesanderson::wes_palette("Zissou1", 20 ,type = "continuous"))+
theme_classic() +
labs(x="24hour Clock", y="", title= "Peak and Lull Period of Patient Activities", subtitle= "percentage calculated is the relative frequency for a specific activity", fill="%")  + scale_y_discrete(limits = rev(levels(patients_df$handling)))+ # reverse display of y-axis varaibles
scale_x_datetime(date_breaks = ("1 hour"), date_labels = "%H")  #display only 24H clock values
patients_df<-data.frame(patients)  #convert the `eventlog` object to a `dataframe` object
levels(patients_df$handling)
patients_df <- patients_df %>%
mutate(handling = fct_relevel(handling, "Registration", "Triage and Assessment", "Blood test", "X-Ray", "MRI SCAN", "Discuss Results", "Check-out"))
levels(patients_df$handling)
patients_df %>%
dplyr::mutate(
time = format(time, format = "%H:%M:%S") %>%
as.POSIXct(format = "%H:%M:%S"), #standardized the date for ploting
hour = lubridate::floor_date(time, "hour")) %>% # round down time to nearest hour
count(handling, hour) %>% # total instances of each activity at each hour
add_count(handling, wt=n) %>% # total instances of each activity
mutate(percent= ((n/nn)*100)) %>% #relative freq for each activity
ggplot(aes(hour, handling, fill=percent)) + geom_tile(size=.5, color="white") + scale_fill_gradientn(colours = wesanderson::wes_palette("Zissou1", 20 ,type = "continuous"))+
theme_classic() +
labs(x="24hour Clock", y="", title= "Peak and Lull Period of Patient Activities", subtitle= "percentage calculated is the relative frequency for a specific activity", fill="%")  + scale_y_discrete(limits = rev(levels(patients_df$handling)))+ # reverse display of y-axis varaibles
scale_x_datetime(date_breaks = ("1 hour"), date_labels = "%H")  #display only 24H clock values
patients_df<-data.frame(patients)  #convert the `eventlog` object to a `dataframe` object
levels(patients_df$handling)
patients_df <- patients_df %>%
mutate(handling = fct_relevel(handling, "Registration", "Triage and Assessment", "Blood test", "X-Ray", "MRI SCAN", "Discuss Results", "Check-out"))
levels(patients_df$handling)
patients_df %>%
dplyr::mutate(
time = format(time, format = "%H:%M:%S") %>%
as.POSIXct(format = "%H:%M:%S"), #standardized the date for ploting
hour = lubridate::floor_date(time, "hour")) %>% # round down time to nearest hour
count(handling, hour) %>% # total instances of each activity at each hour
add_count(handling, wt=n) %>% # total instances of each activity
mutate(percent= ((n/nn)*100)) %>% #relative freq for each activity
ggplot(aes(hour, handling, fill=percent)) + geom_tile(size=.5, color="white") + scale_fill_gradientn(colours = wesanderson::wes_palette("Zissou1", 20 ,type = "continuous"))+
theme_classic() +
labs(x="24hour Clock", y="", title= "Peak and Lull Period of Patient Activities", subtitle= "percentage calculated is the relative frequency for a specific activity", fill="%")  + scale_y_discrete(limits = rev(levels(patients_df$handling)))+ # reverse display of y-axis varaibles
scale_x_datetime(date_breaks = ("1 hour"), date_labels = "%H")  #display only 24H clock values
remotes::install_github("jolars/komadown")
tinytex::install_tinytex()
tinytex::install_tinytex()
install.packages("trackdown")
install.packages("remotes")
install.packages(c("bitops", "blob", "bookdown", "boot", "brio", "broom", "bslib", "cachem", "callr", "caTools", "class", "cli", "cluster", "colorspace", "cpp11", "credentials", "curl", "datetimeutils", "dbplyr", "dendextend", "desc", "devtools", "diffobj", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "forecast", "gert", "ggforce", "gghighlight", "ggplot2", "ggraph", "gh", "googleVis", "gtools", "haven", "hms", "httpuv", "isoband", "jpeg", "jqr", "jquerylib", "kableExtra", "KernSmooth", "later", "lattice", "lubridate", "lwgeom", "magick", "maptools", "MASS", "Matrix", "mgcv", "mime", "nnet", "odbc", "openssl", "ozmaps", "packrat", "pagedown", "paletteer", "pander", "pillar", "pkgload", "plotly", "processx", "protolite", "ps", "qrcode", "R6", "raster", "Rcpp", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "reticulate", "rmapshaper", "rmarkdown", "rsconnect", "Rttf2pt1", "rversions", "rvest", "sass", "seriation", "servr", "sf", "sparklyr", "spatial", "stars", "stringi", "survival", "svglite", "systemfonts", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "todor", "tufte", "tweenr", "units", "utf8", "V8", "vctrs", "viridis", "viridisLite", "vistime", "waldo", "websocket", "withr", "xaringan", "xaringanthemer", "xfun", "XML", "zip", "zoo"))
install.packages(c("bitops", "blob", "bookdown", "boot", "brio", "broom", "bslib", "cachem", "callr", "caTools", "class", "cli", "cluster", "colorspace", "cpp11", "credentials", "curl", "datetimeutils", "dbplyr", "dendextend", "desc", "devtools", "diffobj", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "forecast", "gert", "ggforce", "gghighlight", "ggplot2", "ggraph", "gh", "googleVis", "gtools", "haven", "hms", "httpuv", "isoband", "jpeg", "jqr", "jquerylib", "kableExtra", "KernSmooth", "later", "lattice", "lubridate", "lwgeom", "magick", "maptools", "MASS", "Matrix", "mgcv", "mime", "nnet", "odbc", "openssl", "ozmaps", "packrat", "pagedown", "paletteer", "pander", "pillar", "pkgload", "plotly", "processx", "protolite", "ps", "qrcode", "R6", "raster", "Rcpp", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "reticulate", "rmapshaper", "rmarkdown", "rsconnect", "Rttf2pt1", "rversions", "rvest", "sass", "seriation", "servr", "sf", "sparklyr", "spatial", "stars", "stringi", "survival", "svglite", "systemfonts", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "todor", "tufte", "tweenr", "units", "utf8", "V8", "vctrs", "viridis", "viridisLite", "vistime", "waldo", "websocket", "withr", "xaringan", "xaringanthemer", "xfun", "XML", "zip", "zoo"))
install.packages(c("bitops", "blob", "bookdown", "boot", "brio", "broom", "bslib", "cachem", "callr", "caTools", "class", "cli", "cluster", "colorspace", "cpp11", "credentials", "curl", "datetimeutils", "dbplyr", "dendextend", "desc", "devtools", "diffobj", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "forecast", "gert", "ggforce", "gghighlight", "ggplot2", "ggraph", "gh", "googleVis", "gtools", "haven", "hms", "httpuv", "isoband", "jpeg", "jqr", "jquerylib", "kableExtra", "KernSmooth", "later", "lattice", "lubridate", "lwgeom", "magick", "maptools", "MASS", "Matrix", "mgcv", "mime", "nnet", "odbc", "openssl", "ozmaps", "packrat", "pagedown", "paletteer", "pander", "pillar", "pkgload", "plotly", "processx", "protolite", "ps", "qrcode", "R6", "raster", "Rcpp", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "reticulate", "rmapshaper", "rmarkdown", "rsconnect", "Rttf2pt1", "rversions", "rvest", "sass", "seriation", "servr", "sf", "sparklyr", "spatial", "stars", "stringi", "survival", "svglite", "systemfonts", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "todor", "tufte", "tweenr", "units", "utf8", "V8", "vctrs", "viridis", "viridisLite", "vistime", "waldo", "websocket", "withr", "xaringan", "xaringanthemer", "xfun", "XML", "zip", "zoo"))
install.packages(c("bitops", "blob", "bookdown", "boot", "brio", "broom", "bslib", "cachem", "callr", "caTools", "class", "cli", "cluster", "colorspace", "cpp11", "credentials", "curl", "datetimeutils", "dbplyr", "dendextend", "desc", "devtools", "diffobj", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "forecast", "gert", "ggforce", "gghighlight", "ggplot2", "ggraph", "gh", "googleVis", "gtools", "haven", "hms", "httpuv", "isoband", "jpeg", "jqr", "jquerylib", "kableExtra", "KernSmooth", "later", "lattice", "lubridate", "lwgeom", "magick", "maptools", "MASS", "Matrix", "mgcv", "mime", "nnet", "odbc", "openssl", "ozmaps", "packrat", "pagedown", "paletteer", "pander", "pillar", "pkgload", "plotly", "processx", "protolite", "ps", "qrcode", "R6", "raster", "Rcpp", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "reticulate", "rmapshaper", "rmarkdown", "rsconnect", "Rttf2pt1", "rversions", "rvest", "sass", "seriation", "servr", "sf", "sparklyr", "spatial", "stars", "stringi", "survival", "svglite", "systemfonts", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "todor", "tufte", "tweenr", "units", "utf8", "V8", "vctrs", "viridis", "viridisLite", "vistime", "waldo", "websocket", "withr", "xaringan", "xaringanthemer", "xfun", "XML", "zip", "zoo"))
install.packages(c("bitops", "blob", "bookdown", "boot", "brio", "broom", "bslib", "cachem", "callr", "caTools", "class", "cli", "cluster", "colorspace", "cpp11", "credentials", "curl", "datetimeutils", "dbplyr", "dendextend", "desc", "devtools", "diffobj", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "forecast", "gert", "ggforce", "gghighlight", "ggplot2", "ggraph", "gh", "googleVis", "gtools", "haven", "hms", "httpuv", "isoband", "jpeg", "jqr", "jquerylib", "kableExtra", "KernSmooth", "later", "lattice", "lubridate", "lwgeom", "magick", "maptools", "MASS", "Matrix", "mgcv", "mime", "nnet", "odbc", "openssl", "ozmaps", "packrat", "pagedown", "paletteer", "pander", "pillar", "pkgload", "plotly", "processx", "protolite", "ps", "qrcode", "R6", "raster", "Rcpp", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "reticulate", "rmapshaper", "rmarkdown", "rsconnect", "Rttf2pt1", "rversions", "rvest", "sass", "seriation", "servr", "sf", "sparklyr", "spatial", "stars", "stringi", "survival", "svglite", "systemfonts", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "todor", "tufte", "tweenr", "units", "utf8", "V8", "vctrs", "viridis", "viridisLite", "vistime", "waldo", "websocket", "withr", "xaringan", "xaringanthemer", "xfun", "XML", "zip", "zoo"))
install.packages("trackdown")
library("trackdown")
trackdown::download_file()
trackdown
q()
demo()
is.things
is.things()
base()
recursion
demo()
demo(is.things)
demo(scoping)
